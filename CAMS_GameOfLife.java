/*
Dawson Fedor Janura
June 11, 2024
Game of Life frame
This frame will pop up when the user selects 'Game Of Life'
and allows them to play Conways game of life and see how
different cell patterns will interact. The user can pause, play,
speed up, and slow down the cells as well as save and load any number
of their simulated games.
 */
package cams;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JToolBar;

/**
 *
 * @author darek1849
 */
public class CAMS_GameOfLife extends javax.swing.JFrame {

    // reference main cuz this is second window
    CAMS_Mainframe main;
    // jpanel is a plane
    private JPanel plane;
    // make a 2d arrray of cells to hold every element on plane
    public Cell[][] map;

    /**
     * Throws IOException. It is a construtor that constructs all necessary
     * components for this frame to run
     *
     * @param m the mainframe this fram hails from
     * @throws IOException any exceptions that can't run
     */
    public CAMS_GameOfLife(CAMS_Mainframe m) throws IOException {
        initComponents();
        main = m;

    }
    // This is where the audio sound of a button being clicked is
    // created
    // create a clip to hold the audio
    Clip clip;
    // inst new audio input stream
    AudioInputStream audioInputStream;
    // make file path
    static String filePath = "src/cams/sound-15.wav";

    // constructor to initialize streams and clip 
    public void SimpleAudioPlayer()
            // throw exceptions
            throws UnsupportedAudioFileException,
            IOException, LineUnavailableException {
        // create AudioInputStream object 
        // get file into audio input stream
        audioInputStream
                = AudioSystem.getAudioInputStream(new File(filePath).getAbsoluteFile());

        // create clip reference 
        clip = AudioSystem.getClip();

        // open audioInputStream to the clip 
        clip.open(audioInputStream);
        // loop the clip once so that when SimpleAudioPlayer happens, it is 
        // played once
        clip.loop(0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws IOException {
        // map is 100x100
        map = new Cell[100][100];
        // when exit button is clicked, this frame will close
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // make the JPanel a game of life plane with width and height dependent
        // on the map of cells, references the 2d array of cells, references
        // this as the main frame
        plane = new GameOfLifePlane(map.length, map[0].length, map, this);
        // Add a jToolbar which will hold all the user's buttons
        // as well as display the number of alive cells, deaths, and 
        // births as Game Of Life goes on
        JToolBar toolbar = new JToolBar();
        toolbar.setBackground(new Color(173, 216, 230));
        // read image file into play and pause icon
        BufferedImage playAndPauseIcon = ImageIO.read(new File("src/cams/images/PlayAndPause.png"));
        // set size and scale appropriate to button
        Image playAndPauseImage = playAndPauseIcon.getScaledInstance(50, 50, Image.SCALE_DEFAULT);
        // instantiate all our labels to display information
        numBirths = new javax.swing.JLabel();
        numDeaths = new javax.swing.JLabel();
        numAlive = new javax.swing.JLabel();
        // instantiate all buttons to alter game and save and load
        halfSpeedBtn = new javax.swing.JButton();
        speedX1Btn = new javax.swing.JButton();
        speedX2Btn = new javax.swing.JButton();
        speedX4Btn = new javax.swing.JButton();
        playAndPauseBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        readBtn = new javax.swing.JButton();
        golHomeBtn = new javax.swing.JButton();
        // sets all the buttons icons
        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/saveNorm.png")));
        readBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/readNorm.png")));
        golHomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/homeNorm.png")));
        playAndPauseBtn.setIcon(new ImageIcon(playAndPauseImage));
        halfSpeedBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/halfspeedNorm.png")));
        speedX1Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/1xspeedNorm.png")));
        speedX2Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/2xspeedNorm.png")));
        //dawson did not upload it //DELETE COMMENT AFTER
        speedX4Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/4xspeedNorm.png")));

// allows for a change in icon when buttons are pressed
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // make button look depressed
                saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/saveDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // button pops back up
                saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/saveNorm.png")));
            }
        });
        // when button is clicked the game is saved
        saveBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                //indicates that user has pressed the button with an audible cue
                //play sound
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // reference the save method in plane
                ((GameOfLifePlane) plane).saveConfig();
                
                // allows for actions on plane to be recorded
                plane.requestFocusInWindow();
                // lets panel record key events that user uses
                plane.setFocusable(true);
                // play sound
                
            }
        });

        // adds mouse listener to change read button icon
        readBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // button is depressed
                readBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/readDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // pops back up
                readBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/readNorm.png")));
            }
        });
        // listens for action and adds functionality
        readBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                //indicates that user has pressed the button with an audible cue
                //play sound
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // lets user choose a file to load
                JFileChooser f = new JFileChooser();
                f.showSaveDialog(null);
                f.setControlButtonsAreShown(true);
                // once selected that file is read to load saved game
                ((GameOfLifePlane) plane).readConfig(f.getSelectedFile().getPath());
                
                plane.requestFocusInWindow();
                plane.setFocusable(true);

            }
        });
        // listens for click to change icon
        speedX4Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // button looks like its being pressed
                speedX4Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/4xspeedDepressed.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // pops back up when mouse is released
                speedX4Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/4xspeedNorm.png")));
            }
        });

        // add action listener for functionality
        speedX4Btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                // reference the speedX4 event in plane class to speed up
                // GOL
                ((Plane) plane).speedX4(evt);
                // play sound
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // add mouse listener to change icon around mouse behaviour
        halfSpeedBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // mouse pressed, button looks pressed
                halfSpeedBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/halfspeedDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // mouse released, button pops back up
                halfSpeedBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/halfspeedNorm.png")));
            }
        });
        // listen for button being depressed
        halfSpeedBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // reference halfspeed event in plane (delay set to double 
                // og delay time)
                ((Plane) plane).halfSpeed(evt);
                // play sound
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // listen for mouse action to change how button looks
        speedX1Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // mouse pressed, button looks pressed
                speedX1Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/1xspeedDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // mouse released, button appears to pop back up
                speedX1Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/1xspeedNorm.png")));
            }
        });
        // listen for action to add functionality
        speedX1Btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // when button is clicked reference regular speed method in 
                // Plane
                ((Plane) plane).speedX1(evt);
                // play click sound
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // listen for buton action to change btn appearance
        speedX2Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // when mouse is pressed, button looks pressed
                speedX2Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/2xspeedDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // mouse released, button pops back up
                speedX2Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/2xspeedNorm.png")));
            }
        });
        // add action listener for functionality
        speedX2Btn.addActionListener(new ActionListener() {
            @Override// override action performed reference plan method
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // reference 2x speed method in plane, to speed up GOL
                ((Plane) plane).speedX2(evt);
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // game of life home button add mouse listener to change button look
        golHomeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // mouse pressed, button pressed
                golHomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/homeDep.png")));
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                // mouse relased, button pops up
                golHomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cams/images/homeNorm.png")));
            }
        });

        // appropriate text for pause play button
        playAndPauseBtn.setText("PLAY/PAUSE");
        // place text in bottom centre of button so that it doesnt overlap
        // with the icon
        playAndPauseBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playAndPauseBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        // listen for button action
        playAndPauseBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // when user clicks play or pause GOL plays or pauses 
                ((Plane) plane).playOrPause(evt);
                // try catch thingy
                try {
                    // call single audio play
                    SimpleAudioPlayer();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
        // action listener for home button functionality
        golHomeBtn.addActionListener((java.awt.event.ActionEvent evt) -> {
            // when pressed the go home action is performed
            golHomeBtnActionPerformed(evt);
            // play audio
            try {
                // call single audio play
                SimpleAudioPlayer();
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(CAMS_GameOfLife.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        // add plane to this frame
        add(plane, BorderLayout.CENTER);
        // add buttons and seperators to the toolbar
        toolbar.add(golHomeBtn);
        // addd a seperator
        toolbar.addSeparator(new Dimension(50, 50)); //Creates a seperation line between the button and the toolbar
        // add play pause btn
        toolbar.add(playAndPauseBtn);
        //make sure to refocus on toolbar
        toolbar.setFocusable(rootPaneCheckingEnabled);
        // add 4x and 2x speed button to toolbar
        toolbar.add(speedX4Btn);
        toolbar.add(speedX2Btn);
        toolbar.add(speedX1Btn);
        toolbar.add(halfSpeedBtn);
        toolbar.addSeparator(new Dimension(25, 50));
        toolbar.add(numAlive);
        toolbar.addSeparator(new Dimension(25, 50));
        toolbar.add(numBirths);
        toolbar.addSeparator(new Dimension(50, 50));
        toolbar.add(numDeaths);
        toolbar.addSeparator(new Dimension(25, 50));
        toolbar.add(saveBtn);
        toolbar.addSeparator(new Dimension(25, 50));
        toolbar.add(readBtn);
        
        // highlights buttons only when cursor "rolls" (the x and y coordinates of the mouse is the same as the buttons location) over it
        toolbar.setRollover(true);
        
        // make toolbar be at top of page
        add(toolbar, BorderLayout.PAGE_START);
        // makes it work
        pack();
        // sets size of panel
        setSize(1000, 800);
        // title of panel
        setTitle("GAME OF LIFE");
        // sets the panel to be in middle of screen
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
// send back to first window

    /**
     * When gol Game OfLife home button is pressed, go back to the main JFrame
     *
     * @param evt btn clicked
     */
    private void golHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {
        main.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_golHomeBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton golHomeBtn;
    private javax.swing.JButton playAndPauseBtn;
    // Add spped altering buttons
    private javax.swing.JButton speedX2Btn;
    private javax.swing.JButton speedX1Btn;
    private javax.swing.JButton halfSpeedBtn;
    private javax.swing.JButton speedX4Btn;
    // add labels to display cell information
    public static javax.swing.JLabel numAlive;
    public static javax.swing.JLabel numBirths;
    public static javax.swing.JLabel numDeaths;
    // add save and load game buttons
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton readBtn;

    // End of variables declaration//GEN-END:variables
}
